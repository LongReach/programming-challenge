(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jiboProgrammingChallenge = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/// <reference path="../typings/index.d.ts" />
"use strict";
var PIXI = require('pixi.js');
var renderer = new PIXI.WebGLRenderer(1280, 720);
document.body.appendChild(renderer.view);
// -----------------------
// Class definitions
// -----------------------
var GridCell = (function () {
    function GridCell(i, j, container) {
        var arrow = PIXI.Sprite.fromImage('images/arrow-icon.png');
        arrow.x = cellDim * (i + 0.5);
        arrow.y = cellDim * (j + 0.5);
        arrow.width = cellDim;
        arrow.height = cellDim;
        arrow.anchor.x = 0.5;
        arrow.anchor.y = 0.5;
        container.addChild(arrow);
        this.sprite = arrow;
        this.direction = 0;
    }
    GridCell.prototype.setDirection = function (val) {
        var pi = 3.14159265;
        this.sprite.rotation = pi * val / 2.0;
        this.direction = val;
    };
    return GridCell;
}());
var GridCharacter = (function () {
    function GridCharacter(name, container) {
        this.sprite = PIXI.Sprite.fromImage(name);
        this.sprite.width = cellDim;
        this.sprite.height = cellDim;
        this.sprite.anchor.x = 0.5;
        this.sprite.anchor.y = 0.5;
        container.addChild(this.sprite);
        this.isMoving = false;
        this.restTimer = 0;
        this.moveTime = 1.0;
        this.state = "inactive";
    }
    GridCharacter.prototype.setPosition = function (i, j) {
        this.sprite.x = cellDim * (i + 0.5);
        this.sprite.y = cellDim * (j + 0.5);
        this.cellIndexDown = i;
        this.cellIndexRight = j;
        this.isMoving = false;
        this.isOnGrid = true;
        this.slideValue = 0;
        this.state = "active";
    };
    GridCharacter.prototype.readyToMove = function () {
        if (this.state != "active") {
            return false;
        }
        return (!this.isMoving && this.restTimer == 0);
    };
    GridCharacter.prototype.requestNewMove = function (direction) {
        if (this.state != "active") {
            return;
        }
        if (this.isMoving) {
            return; // can't change while already moving
        }
        if (direction == 0) {
            this.xMovementDir = -1.0;
            this.yMovementDir = 0.0;
        }
        else if (direction == 1) {
            this.xMovementDir = 0.0;
            this.yMovementDir = -1.0;
        }
        else if (direction == 2) {
            this.xMovementDir = 1.0;
            this.yMovementDir = 0.0;
        }
        else {
            this.xMovementDir = 0.0;
            this.yMovementDir = 1.0;
        }
        this.slideValue = 0;
        this.isMoving = true;
    };
    GridCharacter.prototype.setState = function (state) {
        if (this.state == state) {
            return;
        }
        console.log("state to " + state);
        this.state = state;
        if (state == "frozen") {
            this.slideValue = 0;
        }
        else if (state == "dying") {
            this.slideValue = 1;
        }
        else if (state == "explode") {
            this.slideValue = 1;
        }
    };
    GridCharacter.prototype.update = function (deltaT) {
        if (this.state == "active") {
            this.sprite.x = cellDim * (this.cellIndexRight + 0.5 + this.xMovementDir * this.slideValue);
            this.sprite.y = cellDim * (this.cellIndexDown + 0.5 + this.yMovementDir * this.slideValue);
            if (this.isMoving) {
                // it takes half a second to move one square
                this.slideValue = this.slideValue + deltaT / this.moveTime;
                if (this.slideValue > 1.0) {
                    // We've arrived
                    this.cellIndexRight = this.cellIndexRight + this.xMovementDir;
                    this.cellIndexDown = this.cellIndexDown + this.yMovementDir;
                    this.slideValue = 0;
                    this.xMovementDir = 0.0;
                    this.yMovementDir = 0.0;
                    this.isMoving = false;
                    this.restTimer = this.moveTime;
                }
            }
            else if (this.restTimer > 0) {
                this.restTimer = this.restTimer - deltaT;
                if (this.restTimer < 0) {
                    this.restTimer = 0;
                }
            }
        } // end if active state
        else if (this.state == "frozen") {
            // sine wave effect
            this.sprite.alpha = 0.5 + 0.5 * Math.cos(this.slideValue);
            this.slideValue = this.slideValue + deltaT * 4;
        }
        else if (this.state == "dying") {
            // fade and shrink effect
            this.sprite.alpha = this.slideValue;
            this.sprite.width = cellDim * (0.5 + this.slideValue / 2);
            this.sprite.height = cellDim * (0.5 + this.slideValue / 2);
            this.slideValue = this.slideValue - deltaT / (this.moveTime * 4.0);
            if (this.slideValue <= 0.0) {
                this.setState("inactive");
            }
        }
        else if (this.state == "explode") {
            // burst and fade effect
            this.sprite.alpha = this.slideValue;
            this.sprite.width = cellDim * (1.0 + (3.0 - this.slideValue * 3.0));
            this.sprite.height = cellDim * (1.0 + (3.0 - this.slideValue * 3.0));
            this.slideValue = this.slideValue - deltaT / (this.moveTime * 4.0);
            if (this.slideValue <= 0.0) {
                this.slideValue = 1; // keep exploding forever
            }
        }
    };
    return GridCharacter;
}());
var ArrowGrid = (function () {
    function ArrowGrid(width, height) {
        this.container = new PIXI.Container();
        stage.addChild(this.container);
        this.container.x = 100;
        this.container.y = 60;
        this.dimX = width;
        this.dimY = height;
        this.grid = [];
        for (var j = 0; j < height; j++) {
            this.grid[j] = [];
            for (var i = 0; i < width; i++) {
                var newCell = new GridCell(i, j, this.container);
                // It's a little boring to have two arrows pointing at each other, so prevent that
                var allowedDirections = [true, true, true, true, false];
                // Is the one above me pointing down?
                if (j > 0 && this.grid[j - 1][i].direction == 3) {
                    // Not allowed to point straight up
                    allowedDirections[1] = false;
                }
                // Is the one to my left pointing right?
                if (i > 0 && this.grid[j][i - 1].direction == 2) {
                    // Not allowed to point left
                    allowedDirections[0] = false;
                }
                var proposedDirection = 4; // not a valid direction, so the first test will fail
                while (allowedDirections[proposedDirection] == false) {
                    console.log("Forbidden direction of " + proposedDirection + " at " + i + "," + j);
                    proposedDirection = Math.floor(Math.random() * 4.0);
                    console.log("  switching to " + proposedDirection);
                }
                newCell.setDirection(proposedDirection);
                this.grid[j][i] = newCell;
            }
            ;
        }
        ;
        //let startPosX:number = Math.floor(Math.random() * this.dimX);
        //let startPosY:number = Math.floor(Math.random() * this.dimY);
        var startPosX = 2 + Math.floor(Math.random() * 5);
        var startPosY = 2 + Math.floor(Math.random() * 5);
        this.checkerCharacter = new GridCharacter('images/red-checker.png', this.container);
        this.checkerCharacter.moveTime = 0.5;
        this.checkerCharacter.setPosition(startPosX, startPosY);
        this.checkMarkCharacter = new GridCharacter('images/green-check-mark.png', this.container);
        this.checkMarkCharacter.moveTime = 0.25;
        this.checkMarkCharacter.setPosition(startPosX, startPosY);
    }
    ArrowGrid.prototype.update = function (deltaT) {
        var characters = [this.checkerCharacter, this.checkMarkCharacter];
        for (var _i = 0, characters_1 = characters; _i < characters_1.length; _i++) {
            var char = characters_1[_i];
            char.update(deltaT);
            if (char.readyToMove()) {
                if (char.cellIndexDown < 0 || char.cellIndexDown >= this.dimY ||
                    char.cellIndexRight < 0 || char.cellIndexRight >= this.dimX) {
                    char.isOnGrid = false;
                }
                else {
                    char.requestNewMove(this.grid[char.cellIndexDown][char.cellIndexRight].direction);
                }
            }
        } // end for
        if (!this.checkerCharacter.isOnGrid) {
            this.checkerCharacter.setState("frozen");
        }
        if (!this.checkMarkCharacter.isOnGrid) {
            this.checkMarkCharacter.setState("dying");
        }
        else if (!characters[0].isMoving && !characters[1].isMoving &&
            characters[0].cellIndexDown == characters[1].cellIndexDown &&
            characters[0].cellIndexRight == characters[1].cellIndexRight) {
            this.checkerCharacter.setState("frozen");
            this.checkMarkCharacter.setState("explode");
        }
    };
    return ArrowGrid;
}());
// -----------------------
// Global vars and basic setup
// -----------------------
// Graphical container
// create the root of the scene graph
var stage = new PIXI.Container();
// Array and dimensions for the grid
var cellDim = 50;
var theGrid;
doSetup();
// -----------------------
// Function definitions
// -----------------------
function update() {
    theGrid.update(0.01);
}
function doSetup() {
    //createGrid();
    console.log("Test");
    theGrid = new ArrowGrid(10, 10);
    setInterval(update, 10);
    animate();
}
function animate() {
    requestAnimationFrame(animate);
    // render the root container
    renderer.render(stage);
}
},{"pixi.js":undefined}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
