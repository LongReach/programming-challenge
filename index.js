(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jiboProgrammingChallenge = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/// <reference path="../typings/index.d.ts" />
"use strict";
var PIXI = require('pixi.js');
var renderer = new PIXI.WebGLRenderer(1280, 720);
document.body.appendChild(renderer.view);
// -----------------------
// Class definitions
// -----------------------
var GridCell = (function () {
    function GridCell(i, j, container) {
        var arrow = PIXI.Sprite.fromImage('images/arrow-icon.png');
        arrow.x = cellDim * (i + 0.5);
        arrow.y = cellDim * (j + 0.5);
        arrow.width = cellDim;
        arrow.height = cellDim;
        arrow.anchor.x = 0.5;
        arrow.anchor.y = 0.5;
        container.addChild(arrow);
        this.sprite = arrow;
        this.direction = 0;
        this.setVisited(false);
    }
    GridCell.prototype.setDirection = function (val) {
        var pi = 3.14159265;
        this.sprite.rotation = pi * val / 2.0;
        this.direction = val;
    };
    GridCell.prototype.setVisited = function (visited) {
        if (visited) {
            this.sprite.tint = 0xffffff;
        }
        else {
            this.sprite.tint = 0xff77aa;
        }
    };
    return GridCell;
}());
var GridCharacter = (function () {
    function GridCharacter(name, container) {
        this.sprite = PIXI.Sprite.fromImage(name);
        this.sprite.width = cellDim;
        this.sprite.height = cellDim;
        this.sprite.anchor.x = 0.5;
        this.sprite.anchor.y = 0.5;
        container.addChild(this.sprite);
        this.isMoving = false;
        this.restTimer = 0;
        this.moveTime = 1.0;
        this.state = "inactive";
    }
    GridCharacter.prototype.setPosition = function (i, j) {
        this.sprite.x = cellDim * (i + 0.5);
        this.sprite.y = cellDim * (j + 0.5);
        this.cellIndexDown = i;
        this.cellIndexRight = j;
        this.isMoving = false;
        this.isOnGrid = true;
        this.slideValue = 0;
        this.state = "active";
    };
    GridCharacter.prototype.readyToMove = function () {
        if (this.state != "active") {
            return false;
        }
        return (!this.isMoving && this.restTimer == 0);
    };
    GridCharacter.prototype.isCollidable = function () {
        if (this.state != "active") {
            return false;
        }
        return !this.isMoving;
    };
    GridCharacter.prototype.requestNewMove = function (direction) {
        if (this.state != "active") {
            return;
        }
        if (this.isMoving) {
            return; // can't change while already moving
        }
        if (direction == 0) {
            this.xMovementDir = -1.0;
            this.yMovementDir = 0.0;
        }
        else if (direction == 1) {
            this.xMovementDir = 0.0;
            this.yMovementDir = -1.0;
        }
        else if (direction == 2) {
            this.xMovementDir = 1.0;
            this.yMovementDir = 0.0;
        }
        else {
            this.xMovementDir = 0.0;
            this.yMovementDir = 1.0;
        }
        this.slideValue = 0;
        this.isMoving = true;
    };
    GridCharacter.prototype.setState = function (state) {
        if (this.state == state || this.state == "inactive") {
            // Nothing happens if we're already in requested state or if character
            // is inactive
            return;
        }
        console.log("state to " + state);
        this.state = state;
        if (state == "frozen") {
            this.slideValue = 0;
        }
        else if (state == "dying") {
            this.slideValue = 1;
        }
        else if (state == "explode") {
            this.slideValue = 1;
        }
    };
    GridCharacter.prototype.update = function (deltaT) {
        if (this.state == "active") {
            this.sprite.x = cellDim * (this.cellIndexRight + 0.5 + this.xMovementDir * this.slideValue);
            this.sprite.y = cellDim * (this.cellIndexDown + 0.5 + this.yMovementDir * this.slideValue);
            if (this.isMoving) {
                // it takes half a second to move one square
                this.slideValue = this.slideValue + deltaT / this.moveTime;
                if (this.slideValue > 1.0) {
                    // We've arrived
                    this.cellIndexRight = this.cellIndexRight + this.xMovementDir;
                    this.cellIndexDown = this.cellIndexDown + this.yMovementDir;
                    this.slideValue = 0;
                    this.xMovementDir = 0.0;
                    this.yMovementDir = 0.0;
                    this.isMoving = false;
                    this.restTimer = this.moveTime;
                }
            }
            else if (this.restTimer > 0) {
                this.restTimer = this.restTimer - deltaT;
                if (this.restTimer < 0) {
                    this.restTimer = 0;
                }
            }
        } // end if active state
        else if (this.state == "frozen") {
            // sine wave effect
            this.sprite.alpha = 0.5 + 0.5 * Math.cos(this.slideValue);
            this.slideValue = this.slideValue + deltaT * 4;
        }
        else if (this.state == "dying") {
            // fade and shrink effect
            this.sprite.alpha = this.slideValue;
            this.sprite.width = cellDim * (0.5 + this.slideValue / 2);
            this.sprite.height = cellDim * (0.5 + this.slideValue / 2);
            this.slideValue = this.slideValue - deltaT / (this.moveTime * 4.0);
            if (this.slideValue <= 0.0) {
                this.setState("inactive");
            }
        }
        else if (this.state == "explode") {
            // burst and fade effect
            this.sprite.alpha = this.slideValue;
            this.sprite.width = cellDim * (1.0 + (3.0 - this.slideValue * 3.0));
            this.sprite.height = cellDim * (1.0 + (3.0 - this.slideValue * 3.0));
            this.slideValue = this.slideValue - deltaT / (this.moveTime * 4.0);
            if (this.slideValue <= 0.0) {
                this.slideValue = 1; // keep exploding forever
            }
        }
    };
    return GridCharacter;
}());
var ArrowGrid = (function () {
    function ArrowGrid(width, height) {
        this.container = new PIXI.Container();
        stage.addChild(this.container);
        this.container.x = 100;
        this.container.y = 60;
        this.dimX = width;
        this.dimY = height;
        this.grid = [];
        for (var j = 0; j < height; j++) {
            this.grid[j] = [];
            for (var i = 0; i < width; i++) {
                var newCell = new GridCell(i, j, this.container);
                // It's a little boring to have two arrows pointing at each other, so prevent that
                var allowedDirections = [true, true, true, true, false];
                // Is the one above me pointing down?
                if (j > 0 && this.grid[j - 1][i].direction == 3) {
                    // Not allowed to point straight up
                    allowedDirections[1] = false;
                }
                // Is the one to my left pointing right?
                if (i > 0 && this.grid[j][i - 1].direction == 2) {
                    // Not allowed to point left
                    allowedDirections[0] = false;
                }
                var proposedDirection = 4; // not a valid direction, so the first test will fail
                while (allowedDirections[proposedDirection] == false) {
                    console.log("Forbidden direction of " + proposedDirection + " at " + i + "," + j);
                    proposedDirection = Math.floor(Math.random() * 4.0);
                    console.log("  switching to " + proposedDirection);
                }
                newCell.setDirection(proposedDirection);
                this.grid[j][i] = newCell;
            }
            ;
        }
        ;
        // create a text object with a nice stroke
        this.theText = new PIXI.Text('Click to begin', { font: 'bold 36px Arial', fill: '#ffff00', align: 'left', stroke: '#0000FF', strokeThickness: 4 });
        this.theText.position.x = this.container.x + cellDim * (this.dimX + 1);
        this.theText.position.y = this.container.y + cellDim;
        stage.addChild(this.theText);
        //let startPosX:number = Math.floor(Math.random() * this.dimX);
        //let startPosY:number = Math.floor(Math.random() * this.dimY);
        var startPosX = 2 + Math.floor(Math.random() * 5);
        var startPosY = 2 + Math.floor(Math.random() * 5);
        this.checkerCharacter = new GridCharacter('images/red-checker.png', this.container);
        this.checkerCharacter.moveTime = 0.5;
        this.checkerCharacter.setPosition(startPosX, startPosY);
        this.checkMarkCharacter = new GridCharacter('images/green-check-mark.png', this.container);
        this.checkMarkCharacter.moveTime = 0.25;
        this.checkMarkCharacter.setPosition(startPosX, startPosY);
    }
    ArrowGrid.prototype.update = function (deltaT) {
        var characters = [this.checkerCharacter, this.checkMarkCharacter];
        for (var _i = 0, characters_1 = characters; _i < characters_1.length; _i++) {
            var char = characters_1[_i];
            char.update(deltaT);
            if (char.readyToMove()) {
                if (char.cellIndexDown < 0 || char.cellIndexDown >= this.dimY ||
                    char.cellIndexRight < 0 || char.cellIndexRight >= this.dimX) {
                    char.isOnGrid = false;
                }
                else {
                    this.grid[char.cellIndexDown][char.cellIndexRight].setVisited(true);
                    char.requestNewMove(this.grid[char.cellIndexDown][char.cellIndexRight].direction);
                }
            }
        } // end for
        if (!this.checkerCharacter.isOnGrid) {
            // slower-moving piece has left the board
            this.checkerCharacter.setState("frozen");
        }
        if (!this.checkMarkCharacter.isOnGrid) {
            // faster-moving piece has left the board
            this.checkMarkCharacter.setState("dying");
            this.checkerCharacter.setState("frozen");
            this.theText.text = "No Loop";
        }
        else if (characters[0].isCollidable() && characters[1].isCollidable() &&
            characters[0].cellIndexDown == characters[1].cellIndexDown &&
            characters[0].cellIndexRight == characters[1].cellIndexRight) {
            // We've caught up
            this.checkerCharacter.setState("frozen");
            this.checkMarkCharacter.setState("explode");
            this.theText.text = "Loop Detected!";
        }
    };
    return ArrowGrid;
}());
// -----------------------
// Global vars and basic setup
// -----------------------
// Graphical container
// create the root of the scene graph
var stage = new PIXI.Container();
// Array and dimensions for the grid
var cellDim = 50;
var theGrid;
doSetup();
// -----------------------
// Function definitions
// -----------------------
function update() {
    theGrid.update(0.01); // advance clock by 1/100th of a second
}
function doSetup() {
    //createGrid();
    console.log("Test");
    theGrid = new ArrowGrid(10, 10);
    // A function that updates a hundred times a second
    setInterval(update, 10);
    animate();
}
function animate() {
    requestAnimationFrame(animate);
    // render the root container
    renderer.render(stage);
}
},{"pixi.js":undefined}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSw4Q0FBOEM7O0FBRTlDLElBQU8sSUFBSSxXQUFXLFNBQVMsQ0FBQyxDQUFDO0FBQ2pDLElBQU0sUUFBUSxHQUFzQixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3RFLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV6QywwQkFBMEI7QUFDMUIsb0JBQW9CO0FBQ3BCLDBCQUEwQjtBQUUxQjtJQUtFLGtCQUFZLENBQVEsRUFBRSxDQUFRLEVBQUUsU0FBd0I7UUFDdEQsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUMzRCxLQUFLLENBQUMsQ0FBQyxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUM5QixLQUFLLENBQUMsQ0FBQyxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUM5QixLQUFLLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUN0QixLQUFLLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztRQUN2QixLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDckIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3JCLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsK0JBQVksR0FBWixVQUFhLEdBQUc7UUFDZCxJQUFNLEVBQUUsR0FBRyxVQUFVLENBQUM7UUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7SUFDdkIsQ0FBQztJQUVELDZCQUFVLEdBQVYsVUFBVyxPQUFlO1FBQ3hCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDWixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDOUIsQ0FBQztRQUNELElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1FBQzlCLENBQUM7SUFDSCxDQUFDO0lBQ0gsZUFBQztBQUFELENBakNBLEFBaUNDLElBQUE7QUFFRDtJQWVFLHVCQUFZLElBQVcsRUFBRSxTQUF3QjtRQUMvQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzNCLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWhDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO0lBQzFCLENBQUM7SUFFRCxtQ0FBVyxHQUFYLFVBQVksQ0FBUSxFQUFFLENBQVE7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztJQUN4QixDQUFDO0lBRUQsbUNBQVcsR0FBWDtRQUNFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMzQixNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUNELE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxvQ0FBWSxHQUFaO1FBQ0UsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDZixDQUFDO1FBQ0QsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN4QixDQUFDO0lBRUQsc0NBQWMsR0FBZCxVQUFlLFNBQVM7UUFDdEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQztRQUNULENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNsQixNQUFNLENBQUMsQ0FBQyxvQ0FBb0M7UUFDOUMsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FDbkIsQ0FBQztZQUNDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDekIsSUFBSSxDQUFDLFlBQVksR0FBSSxHQUFHLENBQUM7UUFDM0IsQ0FBQztRQUNELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLENBQ3hCLENBQUM7WUFDQyxJQUFJLENBQUMsWUFBWSxHQUFJLEdBQUcsQ0FBQztZQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQzNCLENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUN4QixDQUFDO1lBQ0MsSUFBSSxDQUFDLFlBQVksR0FBSSxHQUFHLENBQUM7WUFDekIsSUFBSSxDQUFDLFlBQVksR0FBSSxHQUFHLENBQUM7UUFDM0IsQ0FBQztRQUNELElBQUksQ0FDSixDQUFDO1lBQ0MsSUFBSSxDQUFDLFlBQVksR0FBSSxHQUFHLENBQUM7WUFDekIsSUFBSSxDQUFDLFlBQVksR0FBSSxHQUFHLENBQUM7UUFDM0IsQ0FBQztRQUNELElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxnQ0FBUSxHQUFSLFVBQVMsS0FBWTtRQUNuQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDcEQsc0VBQXNFO1lBQ3RFLGNBQWM7WUFDZCxNQUFNLENBQUM7UUFDVCxDQUFDO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDdEIsQ0FBQztRQUNELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUN0QixDQUFDO1FBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLENBQUM7SUFDSCxDQUFDO0lBRUQsOEJBQU0sR0FBTixVQUFPLE1BQU07UUFDWCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDNUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDM0YsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLDRDQUE0QztnQkFDNUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUMzRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxDQUMxQixDQUFDO29CQUNDLGdCQUFnQjtvQkFDaEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7b0JBQzlELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO29CQUM1RCxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztvQkFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7b0JBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO29CQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztvQkFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUNqQyxDQUFDO1lBQ0gsQ0FBQztZQUNELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUM1QixDQUFDO2dCQUNDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7Z0JBQ3pDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7Z0JBQ3JCLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLHNCQUFzQjtRQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLG1CQUFtQjtZQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQy9CLHlCQUF5QjtZQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLE9BQU8sR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ25FLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM1QixDQUFDO1FBQ0gsQ0FBQztRQUNELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDakMsd0JBQXdCO1lBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsT0FBTyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNwRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxPQUFPLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3JFLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ25FLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyx5QkFBeUI7WUFDaEQsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQTdKQSxBQTZKQyxJQUFBO0FBRUQ7SUFXRSxtQkFBWSxLQUFZLEVBQUUsTUFBYTtRQUNyQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3RDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQy9CLElBQUksT0FBTyxHQUFZLElBQUksUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUMxRCxrRkFBa0Y7Z0JBQ2xGLElBQUksaUJBQWlCLEdBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ2xFLHFDQUFxQztnQkFDckMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDOUMsbUNBQW1DO29CQUNuQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBRS9CLENBQUM7Z0JBQ0Qsd0NBQXdDO2dCQUN4QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM5Qyw0QkFBNEI7b0JBQzVCLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFFL0IsQ0FBQztnQkFDRCxJQUFJLGlCQUFpQixHQUFVLENBQUMsQ0FBQyxDQUFDLHFEQUFxRDtnQkFDdkYsT0FBTyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEtBQUssRUFDcEQsQ0FBQztvQkFDQyxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixHQUFHLGlCQUFpQixHQUFHLE1BQU0sR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUNsRixpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztvQkFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO2dCQUNyRCxDQUFDO2dCQUNELE9BQU8sQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7WUFDNUIsQ0FBQztZQUFBLENBQUM7UUFDTixDQUFDO1FBQUEsQ0FBQztRQUVGLDBDQUEwQztRQUMxQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuSixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ3JELEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTdCLCtEQUErRDtRQUMvRCwrREFBK0Q7UUFDL0QsSUFBSSxTQUFTLEdBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pELElBQUksU0FBUyxHQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxhQUFhLENBQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLGFBQWEsQ0FBQyw2QkFBNkIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDeEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELDBCQUFNLEdBQU4sVUFBTyxNQUFhO1FBQ2xCLElBQUksVUFBVSxHQUFtQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUVsRixHQUFHLENBQUMsQ0FBYSxVQUFVLEVBQVYseUJBQVUsRUFBVix3QkFBVSxFQUFWLElBQVUsQ0FBQztZQUF2QixJQUFJLElBQUksbUJBQUE7WUFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLElBQUk7b0JBQzNELElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQzlELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO2dCQUN4QixDQUFDO2dCQUNELElBQUksQ0FDSixDQUFDO29CQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3BFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNwRixDQUFDO1lBQ0gsQ0FBQztTQUNGLENBQUMsVUFBVTtRQUVaLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDcEMseUNBQXlDO1lBQ3pDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDdEMseUNBQXlDO1lBQ3pDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxTQUFTLENBQUE7UUFDL0IsQ0FBQztRQUdELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRTtZQUNuRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhO1lBQzFELFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDN0Qsa0JBQWtCO1lBQ2xCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDekMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxnQkFBZ0IsQ0FBQTtRQUN4QyxDQUFDO0lBQ0gsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0ExR0EsQUEwR0MsSUFBQTtBQUVELDBCQUEwQjtBQUMxQiw4QkFBOEI7QUFDOUIsMEJBQTBCO0FBRTFCLHNCQUFzQjtBQUV0QixxQ0FBcUM7QUFDckMsSUFBSSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7QUFFakMsb0NBQW9DO0FBQ3BDLElBQUksT0FBTyxHQUFVLEVBQUUsQ0FBQztBQUV4QixJQUFJLE9BQWlCLENBQUM7QUFFdEIsT0FBTyxFQUFFLENBQUM7QUFFViwwQkFBMEI7QUFDMUIsdUJBQXVCO0FBQ3ZCLDBCQUEwQjtBQUUxQjtJQUNJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyx1Q0FBdUM7QUFDakUsQ0FBQztBQUVEO0lBQ0UsZUFBZTtJQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEIsT0FBTyxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNoQyxtREFBbUQ7SUFDbkQsV0FBVyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4QixPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUM7QUFFRDtJQUVJLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRS9CLDRCQUE0QjtJQUM1QixRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNCLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvaW5kZXguZC50c1wiIC8+XG5cbmltcG9ydCBQSVhJID0gcmVxdWlyZSgncGl4aS5qcycpO1xuY29uc3QgcmVuZGVyZXI6UElYSS5XZWJHTFJlbmRlcmVyID0gbmV3IFBJWEkuV2ViR0xSZW5kZXJlcigxMjgwLCA3MjApO1xuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZW5kZXJlci52aWV3KTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIENsYXNzIGRlZmluaXRpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jbGFzcyBHcmlkQ2VsbCB7XG4gIHNwcml0ZTpQSVhJLlNwcml0ZTtcbiAgLy8gQXJyb3cncyBmYWNpbmcgZGlyZWN0aW9uOiAwPWxlZnQsIDE9dXAsIDI9cmlnaHQsIDM9ZG93blxuICBkaXJlY3Rpb246bnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGk6bnVtYmVyLCBqOm51bWJlciwgY29udGFpbmVyOlBJWEkuQ29udGFpbmVyKSB7XG4gICAgdmFyIGFycm93ID0gUElYSS5TcHJpdGUuZnJvbUltYWdlKCdpbWFnZXMvYXJyb3ctaWNvbi5wbmcnKTtcbiAgICBhcnJvdy54ID0gY2VsbERpbSAqIChpICsgMC41KTtcbiAgICBhcnJvdy55ID0gY2VsbERpbSAqIChqICsgMC41KTtcbiAgICBhcnJvdy53aWR0aCA9IGNlbGxEaW07XG4gICAgYXJyb3cuaGVpZ2h0ID0gY2VsbERpbTtcbiAgICBhcnJvdy5hbmNob3IueCA9IDAuNTtcbiAgICBhcnJvdy5hbmNob3IueSA9IDAuNTtcbiAgICBjb250YWluZXIuYWRkQ2hpbGQoYXJyb3cpO1xuICAgIHRoaXMuc3ByaXRlID0gYXJyb3c7XG4gICAgdGhpcy5kaXJlY3Rpb24gPSAwO1xuICAgIHRoaXMuc2V0VmlzaXRlZChmYWxzZSk7XG4gIH1cblxuICBzZXREaXJlY3Rpb24odmFsKSB7XG4gICAgY29uc3QgcGkgPSAzLjE0MTU5MjY1O1xuICAgIHRoaXMuc3ByaXRlLnJvdGF0aW9uID0gcGkgKiB2YWwgLyAyLjA7XG4gICAgdGhpcy5kaXJlY3Rpb24gPSB2YWw7XG4gIH1cblxuICBzZXRWaXNpdGVkKHZpc2l0ZWQ6Ym9vbGVhbikge1xuICAgIGlmICh2aXNpdGVkKSB7XG4gICAgICB0aGlzLnNwcml0ZS50aW50ID0gMHhmZmZmZmY7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5zcHJpdGUudGludCA9IDB4ZmY3N2FhO1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBHcmlkQ2hhcmFjdGVyIHtcbiAgc3ByaXRlOlBJWEkuU3ByaXRlO1xuICBjZWxsSW5kZXhSaWdodDpudW1iZXI7XG4gIGNlbGxJbmRleERvd246bnVtYmVyO1xuICB4TW92ZW1lbnREaXI6bnVtYmVyO1xuICB5TW92ZW1lbnREaXI6bnVtYmVyO1xuXG4gIHNsaWRlVmFsdWU6bnVtYmVyO1xuICByZXN0VGltZXI6bnVtYmVyO1xuICBtb3ZlVGltZTpudW1iZXI7XG5cbiAgaXNNb3Zpbmc6Ym9vbGVhbjtcbiAgaXNPbkdyaWQ6Ym9vbGVhbjtcbiAgc3RhdGU6c3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6c3RyaW5nLCBjb250YWluZXI6UElYSS5Db250YWluZXIpIHtcbiAgICB0aGlzLnNwcml0ZSA9IFBJWEkuU3ByaXRlLmZyb21JbWFnZShuYW1lKTtcbiAgICB0aGlzLnNwcml0ZS53aWR0aCA9IGNlbGxEaW07XG4gICAgdGhpcy5zcHJpdGUuaGVpZ2h0ID0gY2VsbERpbTtcbiAgICB0aGlzLnNwcml0ZS5hbmNob3IueCA9IDAuNTtcbiAgICB0aGlzLnNwcml0ZS5hbmNob3IueSA9IDAuNTtcbiAgICBjb250YWluZXIuYWRkQ2hpbGQodGhpcy5zcHJpdGUpO1xuXG4gICAgdGhpcy5pc01vdmluZyA9IGZhbHNlO1xuICAgIHRoaXMucmVzdFRpbWVyID0gMDtcbiAgICB0aGlzLm1vdmVUaW1lID0gMS4wO1xuICAgIHRoaXMuc3RhdGUgPSBcImluYWN0aXZlXCI7XG4gIH1cblxuICBzZXRQb3NpdGlvbihpOm51bWJlciwgajpudW1iZXIpIHtcbiAgICB0aGlzLnNwcml0ZS54ID0gY2VsbERpbSAqIChpICsgMC41KTtcbiAgICB0aGlzLnNwcml0ZS55ID0gY2VsbERpbSAqIChqICsgMC41KTtcbiAgICB0aGlzLmNlbGxJbmRleERvd24gPSBpO1xuICAgIHRoaXMuY2VsbEluZGV4UmlnaHQgPSBqO1xuICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmlzT25HcmlkID0gdHJ1ZTtcbiAgICB0aGlzLnNsaWRlVmFsdWUgPSAwO1xuICAgIHRoaXMuc3RhdGUgPSBcImFjdGl2ZVwiO1xuICB9XG5cbiAgcmVhZHlUb01vdmUoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgIT0gXCJhY3RpdmVcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKCF0aGlzLmlzTW92aW5nICYmIHRoaXMucmVzdFRpbWVyID09IDApO1xuICB9XG5cbiAgaXNDb2xsaWRhYmxlKCkge1xuICAgIGlmICh0aGlzLnN0YXRlICE9IFwiYWN0aXZlXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuICF0aGlzLmlzTW92aW5nO1xuICB9XG5cbiAgcmVxdWVzdE5ld01vdmUoZGlyZWN0aW9uKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgIT0gXCJhY3RpdmVcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc01vdmluZykge1xuICAgICAgcmV0dXJuOyAvLyBjYW4ndCBjaGFuZ2Ugd2hpbGUgYWxyZWFkeSBtb3ZpbmdcbiAgICB9XG4gICAgaWYgKGRpcmVjdGlvbiA9PSAwKSAvLyBsZWZ0XG4gICAge1xuICAgICAgdGhpcy54TW92ZW1lbnREaXIgPSAtMS4wO1xuICAgICAgdGhpcy55TW92ZW1lbnREaXIgPSAgMC4wO1xuICAgIH1cbiAgICBlbHNlIGlmIChkaXJlY3Rpb24gPT0gMSkgLy8gdXBcbiAgICB7XG4gICAgICB0aGlzLnhNb3ZlbWVudERpciA9ICAwLjA7XG4gICAgICB0aGlzLnlNb3ZlbWVudERpciA9IC0xLjA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRpcmVjdGlvbiA9PSAyKSAvLyByaWdodFxuICAgIHtcbiAgICAgIHRoaXMueE1vdmVtZW50RGlyID0gIDEuMDtcbiAgICAgIHRoaXMueU1vdmVtZW50RGlyID0gIDAuMDtcbiAgICB9XG4gICAgZWxzZSAgLy8gZG93blxuICAgIHtcbiAgICAgIHRoaXMueE1vdmVtZW50RGlyID0gIDAuMDtcbiAgICAgIHRoaXMueU1vdmVtZW50RGlyID0gIDEuMDtcbiAgICB9XG4gICAgdGhpcy5zbGlkZVZhbHVlID0gMDtcbiAgICB0aGlzLmlzTW92aW5nID0gdHJ1ZTtcbiAgfVxuXG4gIHNldFN0YXRlKHN0YXRlOnN0cmluZykge1xuICAgIGlmICh0aGlzLnN0YXRlID09IHN0YXRlIHx8IHRoaXMuc3RhdGUgPT0gXCJpbmFjdGl2ZVwiKSB7XG4gICAgICAvLyBOb3RoaW5nIGhhcHBlbnMgaWYgd2UncmUgYWxyZWFkeSBpbiByZXF1ZXN0ZWQgc3RhdGUgb3IgaWYgY2hhcmFjdGVyXG4gICAgICAvLyBpcyBpbmFjdGl2ZVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcInN0YXRlIHRvIFwiICsgc3RhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICBpZiAoc3RhdGUgPT0gXCJmcm96ZW5cIikge1xuICAgICAgdGhpcy5zbGlkZVZhbHVlID0gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3RhdGUgPT0gXCJkeWluZ1wiKSB7XG4gICAgICB0aGlzLnNsaWRlVmFsdWUgPSAxO1xuICAgIH1cbiAgICBlbHNlIGlmIChzdGF0ZSA9PSBcImV4cGxvZGVcIikge1xuICAgICAgdGhpcy5zbGlkZVZhbHVlID0gMTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGUoZGVsdGFUKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT0gXCJhY3RpdmVcIikge1xuICAgICAgdGhpcy5zcHJpdGUueCA9IGNlbGxEaW0gKiAodGhpcy5jZWxsSW5kZXhSaWdodCArIDAuNSArIHRoaXMueE1vdmVtZW50RGlyICogdGhpcy5zbGlkZVZhbHVlKTtcbiAgICAgIHRoaXMuc3ByaXRlLnkgPSBjZWxsRGltICogKHRoaXMuY2VsbEluZGV4RG93biArIDAuNSArIHRoaXMueU1vdmVtZW50RGlyICogdGhpcy5zbGlkZVZhbHVlKTtcbiAgICAgIGlmICh0aGlzLmlzTW92aW5nKSB7XG4gICAgICAgIC8vIGl0IHRha2VzIGhhbGYgYSBzZWNvbmQgdG8gbW92ZSBvbmUgc3F1YXJlXG4gICAgICAgIHRoaXMuc2xpZGVWYWx1ZSA9IHRoaXMuc2xpZGVWYWx1ZSArIGRlbHRhVCAvIHRoaXMubW92ZVRpbWU7XG4gICAgICAgIGlmICh0aGlzLnNsaWRlVmFsdWUgPiAxLjApXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBXZSd2ZSBhcnJpdmVkXG4gICAgICAgICAgdGhpcy5jZWxsSW5kZXhSaWdodCA9IHRoaXMuY2VsbEluZGV4UmlnaHQgKyB0aGlzLnhNb3ZlbWVudERpcjtcbiAgICAgICAgICB0aGlzLmNlbGxJbmRleERvd24gPSB0aGlzLmNlbGxJbmRleERvd24gKyB0aGlzLnlNb3ZlbWVudERpcjtcbiAgICAgICAgICB0aGlzLnNsaWRlVmFsdWUgPSAwO1xuICAgICAgICAgIHRoaXMueE1vdmVtZW50RGlyID0gMC4wO1xuICAgICAgICAgIHRoaXMueU1vdmVtZW50RGlyID0gMC4wO1xuICAgICAgICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLnJlc3RUaW1lciA9IHRoaXMubW92ZVRpbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMucmVzdFRpbWVyID4gMClcbiAgICAgIHtcbiAgICAgICAgdGhpcy5yZXN0VGltZXIgPSB0aGlzLnJlc3RUaW1lciAtIGRlbHRhVDtcbiAgICAgICAgaWYgKHRoaXMucmVzdFRpbWVyIDwgMCkge1xuICAgICAgICAgIHRoaXMucmVzdFRpbWVyID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gZW5kIGlmIGFjdGl2ZSBzdGF0ZVxuICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUgPT0gXCJmcm96ZW5cIikge1xuICAgICAgLy8gc2luZSB3YXZlIGVmZmVjdFxuICAgICAgdGhpcy5zcHJpdGUuYWxwaGEgPSAwLjUgKyAwLjUgKiBNYXRoLmNvcyh0aGlzLnNsaWRlVmFsdWUpO1xuICAgICAgdGhpcy5zbGlkZVZhbHVlID0gdGhpcy5zbGlkZVZhbHVlICsgZGVsdGFUICogNDtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5zdGF0ZSA9PSBcImR5aW5nXCIpIHtcbiAgICAgIC8vIGZhZGUgYW5kIHNocmluayBlZmZlY3RcbiAgICAgIHRoaXMuc3ByaXRlLmFscGhhID0gdGhpcy5zbGlkZVZhbHVlO1xuICAgICAgdGhpcy5zcHJpdGUud2lkdGggPSBjZWxsRGltICogKDAuNSArIHRoaXMuc2xpZGVWYWx1ZSAvIDIpO1xuICAgICAgdGhpcy5zcHJpdGUuaGVpZ2h0ID0gY2VsbERpbSAqICgwLjUgKyB0aGlzLnNsaWRlVmFsdWUgLyAyKTtcbiAgICAgIHRoaXMuc2xpZGVWYWx1ZSA9IHRoaXMuc2xpZGVWYWx1ZSAtIGRlbHRhVCAvICh0aGlzLm1vdmVUaW1lICogNC4wKTtcbiAgICAgIGlmICh0aGlzLnNsaWRlVmFsdWUgPD0gMC4wKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoXCJpbmFjdGl2ZVwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5zdGF0ZSA9PSBcImV4cGxvZGVcIikge1xuICAgICAgLy8gYnVyc3QgYW5kIGZhZGUgZWZmZWN0XG4gICAgICB0aGlzLnNwcml0ZS5hbHBoYSA9IHRoaXMuc2xpZGVWYWx1ZTtcbiAgICAgIHRoaXMuc3ByaXRlLndpZHRoID0gY2VsbERpbSAqICgxLjAgKyAoMy4wIC0gdGhpcy5zbGlkZVZhbHVlICogMy4wKSk7XG4gICAgICB0aGlzLnNwcml0ZS5oZWlnaHQgPSBjZWxsRGltICogKDEuMCArICgzLjAgLSB0aGlzLnNsaWRlVmFsdWUgKiAzLjApKTtcbiAgICAgIHRoaXMuc2xpZGVWYWx1ZSA9IHRoaXMuc2xpZGVWYWx1ZSAtIGRlbHRhVCAvICh0aGlzLm1vdmVUaW1lICogNC4wKTtcbiAgICAgIGlmICh0aGlzLnNsaWRlVmFsdWUgPD0gMC4wKSB7XG4gICAgICAgIHRoaXMuc2xpZGVWYWx1ZSA9IDE7IC8vIGtlZXAgZXhwbG9kaW5nIGZvcmV2ZXJcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgQXJyb3dHcmlkIHtcbiAgY29udGFpbmVyOlBJWEkuQ29udGFpbmVyO1xuICBncmlkOkdyaWRDZWxsW11bXTtcbiAgZGltWDpudW1iZXI7XG4gIGRpbVk6bnVtYmVyO1xuXG4gIGNoZWNrZXJDaGFyYWN0ZXI6R3JpZENoYXJhY3RlcjtcbiAgY2hlY2tNYXJrQ2hhcmFjdGVyOkdyaWRDaGFyYWN0ZXI7XG5cbiAgdGhlVGV4dDpQSVhJLlRleHQ7XG5cbiAgY29uc3RydWN0b3Iod2lkdGg6bnVtYmVyLCBoZWlnaHQ6bnVtYmVyKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBuZXcgUElYSS5Db250YWluZXIoKTtcbiAgICBzdGFnZS5hZGRDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgdGhpcy5jb250YWluZXIueCA9IDEwMDtcbiAgICB0aGlzLmNvbnRhaW5lci55ID0gNjA7XG4gICAgdGhpcy5kaW1YID0gd2lkdGg7XG4gICAgdGhpcy5kaW1ZID0gaGVpZ2h0O1xuICAgIHRoaXMuZ3JpZCA9IFtdO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgaGVpZ2h0OyBqKyspIHtcbiAgICAgICAgdGhpcy5ncmlkW2pdID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd2lkdGg7IGkrKykge1xuICAgICAgICAgIGxldCBuZXdDZWxsOkdyaWRDZWxsID0gbmV3IEdyaWRDZWxsKGksIGosIHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgICAvLyBJdCdzIGEgbGl0dGxlIGJvcmluZyB0byBoYXZlIHR3byBhcnJvd3MgcG9pbnRpbmcgYXQgZWFjaCBvdGhlciwgc28gcHJldmVudCB0aGF0XG4gICAgICAgICAgbGV0IGFsbG93ZWREaXJlY3Rpb25zOmJvb2xlYW5bXSA9IFt0cnVlLCB0cnVlLCB0cnVlLCB0cnVlLCBmYWxzZV07XG4gICAgICAgICAgLy8gSXMgdGhlIG9uZSBhYm92ZSBtZSBwb2ludGluZyBkb3duP1xuICAgICAgICAgIGlmIChqID4gMCAmJiB0aGlzLmdyaWRbai0xXVtpXS5kaXJlY3Rpb24gPT0gMykge1xuICAgICAgICAgICAgLy8gTm90IGFsbG93ZWQgdG8gcG9pbnQgc3RyYWlnaHQgdXBcbiAgICAgICAgICAgIGFsbG93ZWREaXJlY3Rpb25zWzFdID0gZmFsc2U7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiRm9yYmlkZGVuIHVwIGF0IFwiICsgaSArIFwiLFwiICsgaik7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIElzIHRoZSBvbmUgdG8gbXkgbGVmdCBwb2ludGluZyByaWdodD9cbiAgICAgICAgICBpZiAoaSA+IDAgJiYgdGhpcy5ncmlkW2pdW2ktMV0uZGlyZWN0aW9uID09IDIpIHtcbiAgICAgICAgICAgIC8vIE5vdCBhbGxvd2VkIHRvIHBvaW50IGxlZnRcbiAgICAgICAgICAgIGFsbG93ZWREaXJlY3Rpb25zWzBdID0gZmFsc2U7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiRm9yYmlkZGVuIGxlZnQgYXQgXCIgKyBpICsgXCIsXCIgKyBqKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IHByb3Bvc2VkRGlyZWN0aW9uOm51bWJlciA9IDQ7IC8vIG5vdCBhIHZhbGlkIGRpcmVjdGlvbiwgc28gdGhlIGZpcnN0IHRlc3Qgd2lsbCBmYWlsXG4gICAgICAgICAgd2hpbGUgKGFsbG93ZWREaXJlY3Rpb25zW3Byb3Bvc2VkRGlyZWN0aW9uXSA9PSBmYWxzZSlcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZvcmJpZGRlbiBkaXJlY3Rpb24gb2YgXCIgKyBwcm9wb3NlZERpcmVjdGlvbiArIFwiIGF0IFwiICsgaSArIFwiLFwiICsgaik7XG4gICAgICAgICAgICBwcm9wb3NlZERpcmVjdGlvbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQuMCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIiAgc3dpdGNoaW5nIHRvIFwiICsgcHJvcG9zZWREaXJlY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXdDZWxsLnNldERpcmVjdGlvbihwcm9wb3NlZERpcmVjdGlvbik7XG4gICAgICAgICAgdGhpcy5ncmlkW2pdW2ldID0gbmV3Q2VsbDtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgLy8gY3JlYXRlIGEgdGV4dCBvYmplY3Qgd2l0aCBhIG5pY2Ugc3Ryb2tlXG4gICAgdGhpcy50aGVUZXh0ID0gbmV3IFBJWEkuVGV4dCgnQ2xpY2sgdG8gYmVnaW4nLCB7IGZvbnQ6ICdib2xkIDM2cHggQXJpYWwnLCBmaWxsOiAnI2ZmZmYwMCcsIGFsaWduOiAnbGVmdCcsIHN0cm9rZTogJyMwMDAwRkYnLCBzdHJva2VUaGlja25lc3M6IDQgfSk7XG4gICAgdGhpcy50aGVUZXh0LnBvc2l0aW9uLnggPSB0aGlzLmNvbnRhaW5lci54ICsgY2VsbERpbSAqICh0aGlzLmRpbVggKyAxKTtcbiAgICB0aGlzLnRoZVRleHQucG9zaXRpb24ueSA9IHRoaXMuY29udGFpbmVyLnkgKyBjZWxsRGltO1xuICAgIHN0YWdlLmFkZENoaWxkKHRoaXMudGhlVGV4dCk7XG5cbiAgICAvL2xldCBzdGFydFBvc1g6bnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5kaW1YKTtcbiAgICAvL2xldCBzdGFydFBvc1k6bnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5kaW1ZKTtcbiAgICBsZXQgc3RhcnRQb3NYOm51bWJlciA9IDIgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1KTtcbiAgICBsZXQgc3RhcnRQb3NZOm51bWJlciA9IDIgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1KTtcbiAgICB0aGlzLmNoZWNrZXJDaGFyYWN0ZXIgPSBuZXcgR3JpZENoYXJhY3RlcignaW1hZ2VzL3JlZC1jaGVja2VyLnBuZycsIHRoaXMuY29udGFpbmVyKTtcbiAgICB0aGlzLmNoZWNrZXJDaGFyYWN0ZXIubW92ZVRpbWUgPSAwLjU7XG4gICAgdGhpcy5jaGVja2VyQ2hhcmFjdGVyLnNldFBvc2l0aW9uKHN0YXJ0UG9zWCwgc3RhcnRQb3NZKTtcbiAgICB0aGlzLmNoZWNrTWFya0NoYXJhY3RlciA9IG5ldyBHcmlkQ2hhcmFjdGVyKCdpbWFnZXMvZ3JlZW4tY2hlY2stbWFyay5wbmcnLCB0aGlzLmNvbnRhaW5lcik7XG4gICAgdGhpcy5jaGVja01hcmtDaGFyYWN0ZXIubW92ZVRpbWUgPSAwLjI1O1xuICAgIHRoaXMuY2hlY2tNYXJrQ2hhcmFjdGVyLnNldFBvc2l0aW9uKHN0YXJ0UG9zWCwgc3RhcnRQb3NZKTtcbiAgfVxuXG4gIHVwZGF0ZShkZWx0YVQ6bnVtYmVyKSB7XG4gICAgbGV0IGNoYXJhY3RlcnM6R3JpZENoYXJhY3RlcltdID0gW3RoaXMuY2hlY2tlckNoYXJhY3RlciwgdGhpcy5jaGVja01hcmtDaGFyYWN0ZXJdO1xuXG4gICAgZm9yIChsZXQgY2hhciBvZiBjaGFyYWN0ZXJzKSB7XG4gICAgICBjaGFyLnVwZGF0ZShkZWx0YVQpO1xuICAgICAgaWYgKGNoYXIucmVhZHlUb01vdmUoKSkge1xuICAgICAgICBpZiAoY2hhci5jZWxsSW5kZXhEb3duIDwgMCB8fCBjaGFyLmNlbGxJbmRleERvd24gPj0gdGhpcy5kaW1ZIHx8XG4gICAgICAgICAgY2hhci5jZWxsSW5kZXhSaWdodCA8IDAgfHwgY2hhci5jZWxsSW5kZXhSaWdodCA+PSB0aGlzLmRpbVgpIHtcbiAgICAgICAgICBjaGFyLmlzT25HcmlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgdGhpcy5ncmlkW2NoYXIuY2VsbEluZGV4RG93bl1bY2hhci5jZWxsSW5kZXhSaWdodF0uc2V0VmlzaXRlZCh0cnVlKTtcbiAgICAgICAgICBjaGFyLnJlcXVlc3ROZXdNb3ZlKHRoaXMuZ3JpZFtjaGFyLmNlbGxJbmRleERvd25dW2NoYXIuY2VsbEluZGV4UmlnaHRdLmRpcmVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIGVuZCBmb3JcblxuICAgIGlmICghdGhpcy5jaGVja2VyQ2hhcmFjdGVyLmlzT25HcmlkKSB7XG4gICAgICAvLyBzbG93ZXItbW92aW5nIHBpZWNlIGhhcyBsZWZ0IHRoZSBib2FyZFxuICAgICAgdGhpcy5jaGVja2VyQ2hhcmFjdGVyLnNldFN0YXRlKFwiZnJvemVuXCIpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuY2hlY2tNYXJrQ2hhcmFjdGVyLmlzT25HcmlkKSB7XG4gICAgICAvLyBmYXN0ZXItbW92aW5nIHBpZWNlIGhhcyBsZWZ0IHRoZSBib2FyZFxuICAgICAgdGhpcy5jaGVja01hcmtDaGFyYWN0ZXIuc2V0U3RhdGUoXCJkeWluZ1wiKTtcbiAgICAgIHRoaXMuY2hlY2tlckNoYXJhY3Rlci5zZXRTdGF0ZShcImZyb3plblwiKTtcbiAgICAgIHRoaXMudGhlVGV4dC50ZXh0ID0gXCJObyBMb29wXCJcbiAgICB9XG4gICAgLy8gQXJlIGJvdGggcGllY2VzIG9uIHRoZSBzYW1lIHNxdWFyZT8gSWYgc28sIHRoZSBmYXN0ZXItbW92aW5nIG9uZSBoYXMgY2F1Z2h0IHVwIHdpdGhcbiAgICAvLyB0aGUgc2xvd2VyLlxuICAgIGVsc2UgaWYgKGNoYXJhY3RlcnNbMF0uaXNDb2xsaWRhYmxlKCkgJiYgY2hhcmFjdGVyc1sxXS5pc0NvbGxpZGFibGUoKSAmJlxuICAgICAgY2hhcmFjdGVyc1swXS5jZWxsSW5kZXhEb3duID09IGNoYXJhY3RlcnNbMV0uY2VsbEluZGV4RG93biAmJlxuICAgICAgY2hhcmFjdGVyc1swXS5jZWxsSW5kZXhSaWdodCA9PSBjaGFyYWN0ZXJzWzFdLmNlbGxJbmRleFJpZ2h0KSB7XG4gICAgICAgIC8vIFdlJ3ZlIGNhdWdodCB1cFxuICAgICAgICB0aGlzLmNoZWNrZXJDaGFyYWN0ZXIuc2V0U3RhdGUoXCJmcm96ZW5cIik7XG4gICAgICAgIHRoaXMuY2hlY2tNYXJrQ2hhcmFjdGVyLnNldFN0YXRlKFwiZXhwbG9kZVwiKTtcbiAgICAgICAgdGhpcy50aGVUZXh0LnRleHQgPSBcIkxvb3AgRGV0ZWN0ZWQhXCJcbiAgICB9XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEdsb2JhbCB2YXJzIGFuZCBiYXNpYyBzZXR1cFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gR3JhcGhpY2FsIGNvbnRhaW5lclxuXG4vLyBjcmVhdGUgdGhlIHJvb3Qgb2YgdGhlIHNjZW5lIGdyYXBoXG52YXIgc3RhZ2UgPSBuZXcgUElYSS5Db250YWluZXIoKTtcblxuLy8gQXJyYXkgYW5kIGRpbWVuc2lvbnMgZm9yIHRoZSBncmlkXG5sZXQgY2VsbERpbTpudW1iZXIgPSA1MDtcblxubGV0IHRoZUdyaWQ6QXJyb3dHcmlkO1xuXG5kb1NldHVwKCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBGdW5jdGlvbiBkZWZpbml0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHRoZUdyaWQudXBkYXRlKDAuMDEpOyAvLyBhZHZhbmNlIGNsb2NrIGJ5IDEvMTAwdGggb2YgYSBzZWNvbmRcbn1cblxuZnVuY3Rpb24gZG9TZXR1cCgpIHtcbiAgLy9jcmVhdGVHcmlkKCk7XG4gIGNvbnNvbGUubG9nKFwiVGVzdFwiKTtcbiAgdGhlR3JpZCA9IG5ldyBBcnJvd0dyaWQoMTAsIDEwKTtcbiAgLy8gQSBmdW5jdGlvbiB0aGF0IHVwZGF0ZXMgYSBodW5kcmVkIHRpbWVzIGEgc2Vjb25kXG4gIHNldEludGVydmFsKHVwZGF0ZSwgMTApO1xuICBhbmltYXRlKCk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGUoKSB7XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG5cbiAgICAvLyByZW5kZXIgdGhlIHJvb3QgY29udGFpbmVyXG4gICAgcmVuZGVyZXIucmVuZGVyKHN0YWdlKTtcbn1cbiJdfQ==
